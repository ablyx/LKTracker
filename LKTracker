import copy
import cv2
import numpy as np
from scipy.signal import convolve2d


def largest_indices(ary, n):
    """Returns the n largest indices from a numpy array."""
    flat = ary.flatten()
    indices = np.argpartition(flat, -n)[-n:]
    indices = indices[np.argsort(-flat[indices])]
    return np.unravel_index(indices, ary.shape)


# frames are grayscale and of the same size
def LKTracker(frame, next_frame, corners=200):
    h, w = frame.shape[:2]
    print(w,h)
    print(frame[0].shape)

    # getting the derivatives
    # Ix and Iy store the gx and gy (derivatives) values
    # Ixx, Ixy and Iyy store the product of gx and gy
    Ix = copy.deepcopy(frame)
    print(Ix[0].shape)
    Iy = copy.deepcopy(frame)
    print('get gradient')
    for x in range(w-1):
        for y in range(h):
            Ix[y][x] = int(frame[y][x+1]) - int(frame[y][x])

    for x in range(w):
        for y in range(h-1):
            Iy[y][x] = int(frame[y + 1][x]) - int(frame[y][x])

    Ixx = np.multiply(Ix,Ix)
    Ixy = np.multiply(Ix, Iy)
    Iyy = np.multiply(Iy, Iy)

    # get Zd = b
    # using a window of all ones instead of gaussian for speed (and convenience)
    window = np.ones((13, 13))
    # convolve gradients with window of interest
    # these W matrices are used to get Z
    Wxx = convolve2d(Ixx, window, mode='full')
    Wxy = convolve2d(Ixy, window, mode='full')
    Wyy = convolve2d(Iyy, window, mode='full')

    # getting b
    I = copy.deepcopy(frame)
    J = copy.deepcopy(next_frame)
    bx = convolve2d(np.multiply((I - J),Ix), window, mode='full')
    by = convolve2d(np.multiply((I - J), Iy), window, mode='full')

    # initial d
    dx = np.zeros((h, w))
    dy = np.zeros((h, w))

    # each pixel in the image has a corresponding window which gives matrix Z
    # getting the smallest eigenvalue of Z
    print('get eig')
    eigvals = np.zeros((h, w))
    for x in range(w):
        for y in range(h):
            Z = np.matrix([[Wxx[y][x], Wxy[y][x]], [Wxx[y][x], Wyy[y][x]]])
            vals, vec = np.linalg.eig(Z)
            eigvals[y][x] = min(vals)

    # split the image into 13 by 13 windows
    # for each window, take the highest eigenvalue and set the rest to 0
    # identify which pixels are good features
    print('get mosaic eig')

    # only want 1 value in window to be non-zero
    def choose_largest_eig(window):
        largest_eig = max(window.ravel())
        chosen = False
        for row in window:
            for i, r in enumerate(row):
                if chosen:
                    row[i] = 0
                else:
                    if r == largest_eig:
                        chosen = True
                    else:
                        row[i] = 0
        return window

    for x in range(0,w-13,13):
        for y in range(0, h-13, 13):
            window = eigvals[y:y+13, x:x+13]
            eigvals[y:y+13, x:x+13] = choose_largest_eig(window)

    # only track (get direction/movement for) good features
    # only solve Zd = b when smallest eigenvalue of Z is large
    # this eigenvalue has already been obtained
    print('get direction')
    for x in range(w):
        for y in range(h):
            if eigvals[y][x] != 0:
                Z = np.matrix([[Wxx[y][x], Wxy[y][x]], [Wxx[y][x], Wyy[y][x]]])
                try:
                    # solve for d
                    Z_inv = np.linalg.inv(Z)
                    b = np.matrix([[bx[y][x],],[by[y][x]],])
                    dxx, dyy = np.dot(Z_inv, b)
                    dx[y][x] = dxx
                    dx[y][x] = dyy
                except:
                    continue

    return dx, dy, eigvals

# lets see if my code works
# get the first 2 frames
cap = cv2.VideoCapture('test/clip.mp4')
ret, frame = cap.read()
frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
ret, next_frame = cap.read()
next_frame = cv2.cvtColor(next_frame, cv2.COLOR_BGR2GRAY)
# eigvals are gotten from the first frame
# correspond to good features
cv2.imwrite('test.jpg', frame)
dx, dy, eigvals = LKTracker(frame, next_frame)
print('track done, plot corners')
# plot the 200 best features
ex, ey = largest_indices(eigvals, 200)
color_frame = cv2.cvtColor(frame, cv2.COLOR_GRAY2RGB)
for i, x in enumerate(ex):
    y = ey[i]
    cv2.circle(color_frame, (y-7,x-7), 1, (0,0,255), -1)

cv2.imshow('color frame', color_frame)
cv2.imwrite('corners200.jpg', color_frame)
cv2.waitKey(0)